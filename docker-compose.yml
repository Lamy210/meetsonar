version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: meetsonar-postgres
    environment:
      POSTGRES_DB: meetsonar
      POSTGRES_USER: meetsonar
      POSTGRES_PASSWORD: meetsonar_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - meetsonar-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U meetsonar"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: meetsonar-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://meetsonar:meetsonar_dev_password@postgres:5432/meetsonar
      PORT: 5000
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - meetsonar-network
    # Run Drizzle migrations before starting the dev server
    command: ["sh", "-c", "npm run db:push && npm run dev"]
    develop:
      watch:
        - action: sync
          path: ./server
          target: /app/server
        - action: sync
          path: ./shared
          target: /app/shared
        - action: rebuild
          path: package.json

  # Frontend Development Server
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    container_name: meetsonar-frontend
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:5000
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - meetsonar-network
    command: npm run dev:client
    develop:
      watch:
        - action: sync
          path: ./client
          target: /app/client
        - action: rebuild
          path: package.json

networks:
  meetsonar-network:
    driver: bridge

volumes:
  postgres_data:
